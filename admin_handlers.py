import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler
from database import Database
from utils import is_admin, parse_onomatopoeia_input, get_user_display_name
from config import DATABASE_NAME, ADMIN_ID

# Initialize database
db = Database(DATABASE_NAME)

async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /admin command - show admin panel"""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return
    
    keyboard = [
        [InlineKeyboardButton("üìù –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –æ–Ω–æ–º–∞—Ç–æ–ø–µ—è–º–∏", callback_data="admin_onomatopoeia")],
        [InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏", callback_data="admin_users")],
        [InlineKeyboardButton("üì¢ –†–æ–∑—Å–∏–ª–∫–∞", callback_data="admin_broadcast")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üîß **–ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞**\n\n–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def add_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /add command"""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return
    
    # Parse the input
    text = update.message.text
    parsed = parse_onomatopoeia_input(text)
    
    if not parsed:
        await update.message.reply_text(
            "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ:\n`/add english - —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞`",
            parse_mode='Markdown'
        )
        return
    
    english, ukrainian = parsed
    
    # Add to database
    if db.add_onomatopoeia(english, ukrainian):
        await update.message.reply_text(
            f"‚úÖ –î–æ–¥–∞–Ω–æ: {english} ‚Üí {ukrainian}",
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text(
            f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è. –ú–æ–∂–ª–∏–≤–æ, '{english}' –≤–∂–µ —ñ—Å–Ω—É—î –≤ –±–∞–∑—ñ.",
            parse_mode='Markdown'
        )

async def delete_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /delete command"""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return
    
    if not context.args or len(context.args) != 1:
        await update.message.reply_text(
            "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ:\n`/delete english_word`",
            parse_mode='Markdown'
        )
        return
    
    english = context.args[0].lower().strip()
    
    if db.delete_onomatopoeia(english):
        await update.message.reply_text(f"‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ: {english}")
    else:
        await update.message.reply_text(f"‚ùå '{english}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ.")

async def ban_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /ban command"""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return
    
    if not context.args or len(context.args) != 1:
        await update.message.reply_text(
            "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ:\n`/ban user_id`",
            parse_mode='Markdown'
        )
        return
    
    try:
        user_id = int(context.args[0])
        
        if user_id == ADMIN_ID:
            await update.message.reply_text("‚ùå –ù–µ–º–æ–∂–ª–∏–≤–æ –∑–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        if db.ban_user(user_id):
            await update.message.reply_text(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π.")
        else:
            await update.message.reply_text(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.")
            
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")

async def unban_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /unban command"""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return
    
    if not context.args or len(context.args) != 1:
        await update.message.reply_text(
            "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ:\n`/unban user_id`",
            parse_mode='Markdown'
        )
        return
    
    try:
        user_id = int(context.args[0])
        
        if db.unban_user(user_id):
            await update.message.reply_text(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–∏–π.")
        else:
            await update.message.reply_text(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.")
            
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")

async def broadcast_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /broadcast command"""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return
    
    if not context.args:
        await update.message.reply_text(
            "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ:\n`/broadcast –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è`",
            parse_mode='Markdown'
        )
        return
    
    message_text = ' '.join(context.args)
    
    # Get all non-banned users
    users = db.get_all_users()
    active_users = [u for u in users if not u['is_banned']]
    
    if not active_users:
        await update.message.reply_text("‚ùå –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏.")
        return
    
    # Confirm broadcast
    keyboard = [
        [InlineKeyboardButton("‚úÖ –¢–∞–∫, –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏", callback_data=f"confirm_broadcast:{message_text}")],
        [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_broadcast")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        f"üì¢ **–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ä–æ–∑—Å–∏–ª–∫–∏**\n\n"
        f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–¥–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ {len(active_users)} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º:\n\n"
        f"_{message_text}_\n\n"
        f"–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏?",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def list_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /list command - show all onomatopoeia"""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return
    
    onomatopoeia_list = db.get_all_onomatopoeia()
    
    if not onomatopoeia_list:
        await update.message.reply_text("üìù –ë–∞–∑–∞ –æ–Ω–æ–º–∞—Ç–æ–ø–µ–π –ø–æ—Ä–æ–∂–Ω—è.")
        return
    
    # Split into chunks to avoid message length limit
    chunk_size = 50
    chunks = [onomatopoeia_list[i:i + chunk_size] for i in range(0, len(onomatopoeia_list), chunk_size)]
    
    for i, chunk in enumerate(chunks):
        text = f"üìù **–ë–∞–∑–∞ –æ–Ω–æ–º–∞—Ç–æ–ø–µ–π (—á–∞—Å—Ç–∏–Ω–∞ {i+1}/{len(chunks)}):**\n\n"
        for english, ukrainian in chunk:
            text += f"‚Ä¢ {english} ‚Üí {ukrainian}\n"
        
        await update.message.reply_text(text, parse_mode='Markdown')

async def admin_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle admin panel callbacks"""
    query = update.callback_query
    await query.answer()
    
    if not is_admin(query.from_user.id):
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É.")
        return
    
    data = query.data
    
    if data == "admin_onomatopoeia":
        keyboard = [
            [InlineKeyboardButton("üìù –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ", callback_data="show_all_onomatopoeia")],
            [InlineKeyboardButton("üîç –ü–æ—à—É–∫", callback_data="search_onomatopoeia")],
            [InlineKeyboardButton("üóë –í–∏–¥–∞–ª–∏—Ç–∏", callback_data="delete_onomatopoeia")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üìù **–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –æ–Ω–æ–º–∞—Ç–æ–ø–µ—è–º–∏**\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    elif data == "admin_users":
        users = db.get_all_users()
        total_users = len(users)
        banned_users = len([u for u in users if u['is_banned']])
        active_users = total_users - banned_users
        
        keyboard = [
            [InlineKeyboardButton("üë• –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ—Ö", callback_data="show_all_users")],
            [InlineKeyboardButton("üö´ –ó–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ", callback_data="show_banned_users")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            f"üë• **–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏**\n\n"
            f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
            f"‚Ä¢ –í—Å—å–æ–≥–æ: {total_users}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω–∏—Ö: {active_users}\n"
            f"‚Ä¢ –ó–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö: {banned_users}\n\n"
            f"–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    elif data == "admin_broadcast":
        keyboard = [
            [InlineKeyboardButton("üìù –¢–µ–∫—Å—Ç–æ–≤–∞ —Ä–æ–∑—Å–∏–ª–∫–∞", callback_data="text_broadcast")],
            [InlineKeyboardButton("üìé –ú–µ–¥—ñ–∞ —Ä–æ–∑—Å–∏–ª–∫–∞", callback_data="media_broadcast")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üì¢ **–†–æ–∑—Å–∏–ª–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å**\n\n"
            "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ä–æ–∑—Å–∏–ª–∫–∏:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    elif data == "admin_stats":
        # Show statistics
        users = db.get_all_users()
        onomatopoeia = db.get_all_onomatopoeia()
        
        total_users = len(users)
        banned_users = len([u for u in users if u['is_banned']])
        active_users = total_users - banned_users
        total_onomatopoeia = len(onomatopoeia)
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞**\n\n"
            f"üë• **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ:**\n"
            f"‚Ä¢ –í—Å—å–æ–≥–æ: {total_users}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω–∏—Ö: {active_users}\n"
            f"‚Ä¢ –ó–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö: {banned_users}\n\n"
            f"üìù **–ë–∞–∑–∞ –æ–Ω–æ–º–∞—Ç–æ–ø–µ–π:**\n"
            f"‚Ä¢ –í—Å—å–æ–≥–æ –∑–∞–ø–∏—Å—ñ–≤: {total_onomatopoeia}\n",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    elif data.startswith("confirm_broadcast:"):
        message_text = data.split(":", 1)[1]
        
        # Get all active users
        users = db.get_all_users()
        active_users = [u for u in users if not u['is_banned']]
        
        sent_count = 0
        failed_count = 0
        
        for user in active_users:
            try:
                await context.bot.send_message(
                    chat_id=user['user_id'],
                    text=f"üì¢ **–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:**\n\n{message_text}",
                    parse_mode='Markdown'
                )
                sent_count += 1
            except Exception as e:
                failed_count += 1
                logging.error(f"Failed to send broadcast to {user['user_id']}: {e}")
        
        await query.edit_message_text(
            f"‚úÖ **–†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞**\n\n"
            f"üì§ –ù–∞–¥—ñ—Å–ª–∞–Ω–æ: {sent_count}\n"
            f"‚ùå –ü–æ–º–∏–ª–æ–∫: {failed_count}"
        )
    
    elif data == "cancel_broadcast":
        await query.edit_message_text("‚ùå –†–æ–∑—Å–∏–ª–∫–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–∞.")
    
    elif data == "admin_main":
        keyboard = [
            [InlineKeyboardButton("üìù –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –æ–Ω–æ–º–∞—Ç–æ–ø–µ—è–º–∏", callback_data="admin_onomatopoeia")],
            [InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏", callback_data="admin_users")],
            [InlineKeyboardButton("üì¢ –†–æ–∑—Å–∏–ª–∫–∞", callback_data="admin_broadcast")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üîß **–ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞**\n\n–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    elif data == "show_all_onomatopoeia":
        onomatopoeia_list = db.get_all_onomatopoeia()
        
        if not onomatopoeia_list:
            await query.edit_message_text("üìù –ë–∞–∑–∞ –æ–Ω–æ–º–∞—Ç–æ–ø–µ–π –ø–æ—Ä–æ–∂–Ω—è.")
            return
        
        # Show first 20 entries
        text = "üìù **–ë–∞–∑–∞ –æ–Ω–æ–º–∞—Ç–æ–ø–µ–π (–ø–µ—Ä—à—ñ 20):**\n\n"
        for i, (english, ukrainian) in enumerate(onomatopoeia_list[:20]):
            text += f"{i+1}. {english} ‚Üí {ukrainian}\n"
        
        if len(onomatopoeia_list) > 20:
            text += f"\n... —Ç–∞ —â–µ {len(onomatopoeia_list) - 20} –∑–∞–ø–∏—Å—ñ–≤"
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_onomatopoeia")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    elif data == "show_all_users":
        users = db.get_all_users()
        
        if not users:
            await query.edit_message_text("üë• –ù–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.")
            return
        
        # Show first 10 users
        text = "üë• **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ (–ø–µ—Ä—à—ñ 10):**\n\n"
        for i, user in enumerate(users[:10]):
            status = "üö´" if user['is_banned'] else "‚úÖ"
            name = user['first_name'] or f"User {user['user_id']}"
            text += f"{i+1}. {status} {name} (ID: {user['user_id']})\n"
        
        if len(users) > 10:
            text += f"\n... —Ç–∞ —â–µ {len(users) - 10} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_users")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
